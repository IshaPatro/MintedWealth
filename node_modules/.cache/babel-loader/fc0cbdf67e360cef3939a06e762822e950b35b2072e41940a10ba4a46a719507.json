{"ast":null,"code":"import _objectSpread from \"/Users/isha/IdeaProjects/MintedWealth/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/isha/IdeaProjects/MintedWealth/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _get from \"/Users/isha/IdeaProjects/MintedWealth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/isha/IdeaProjects/MintedWealth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/isha/IdeaProjects/MintedWealth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/isha/IdeaProjects/MintedWealth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/isha/IdeaProjects/MintedWealth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/isha/IdeaProjects/MintedWealth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// src/Animated.ts\nimport { defineHidden } from \"@react-spring/shared\";\nvar $node = Symbol.for(\"Animated:node\");\nvar isAnimated = function isAnimated(value) {\n  return !!value && value[$node] === value;\n};\nvar getAnimated = function getAnimated(owner) {\n  return owner && owner[$node];\n};\nvar setAnimated = function setAnimated(owner, node) {\n  return defineHidden(owner, $node, node);\n};\nvar getPayload = function getPayload(owner) {\n  return owner && owner[$node] && owner[$node].getPayload();\n};\nvar Animated = /*#__PURE__*/function () {\n  function Animated() {\n    _classCallCheck(this, Animated);\n    setAnimated(this, this);\n  }\n  /** Get every `AnimatedValue` used by this node. */\n  _createClass(Animated, [{\n    key: \"getPayload\",\n    value: function getPayload() {\n      return this.payload || [];\n    }\n  }]);\n  return Animated;\n}();\n\n// src/AnimatedValue.ts\nimport { is } from \"@react-spring/shared\";\nvar AnimatedValue = /*#__PURE__*/function (_Animated) {\n  _inherits(AnimatedValue, _Animated);\n  var _super = _createSuper(AnimatedValue);\n  function AnimatedValue(_value) {\n    var _this;\n    _classCallCheck(this, AnimatedValue);\n    _this = _super.call(this);\n    _this._value = _value;\n    _this.done = true;\n    _this.durationProgress = 0;\n    if (is.num(_this._value)) {\n      _this.lastPosition = _this._value;\n    }\n    return _this;\n  }\n  /** @internal */\n  _createClass(AnimatedValue, [{\n    key: \"getPayload\",\n    value: function getPayload() {\n      return [this];\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this._value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, step) {\n      if (is.num(value)) {\n        this.lastPosition = value;\n        if (step) {\n          value = Math.round(value / step) * step;\n          if (this.done) {\n            this.lastPosition = value;\n          }\n        }\n      }\n      if (this._value === value) {\n        return false;\n      }\n      this._value = value;\n      return true;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var done = this.done;\n      this.done = false;\n      if (is.num(this._value)) {\n        this.elapsedTime = 0;\n        this.durationProgress = 0;\n        this.lastPosition = this._value;\n        if (done) this.lastVelocity = null;\n        this.v0 = null;\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      return new AnimatedValue(value);\n    }\n  }]);\n  return AnimatedValue;\n}(Animated);\n\n// src/AnimatedString.ts\nimport { is as is2, createInterpolator } from \"@react-spring/shared\";\nvar AnimatedString = /*#__PURE__*/function (_AnimatedValue) {\n  _inherits(AnimatedString, _AnimatedValue);\n  var _super2 = _createSuper(AnimatedString);\n  function AnimatedString(value) {\n    var _this2;\n    _classCallCheck(this, AnimatedString);\n    _this2 = _super2.call(this, 0);\n    _this2._string = null;\n    _this2._toString = createInterpolator({\n      output: [value, value]\n    });\n    return _this2;\n  }\n  /** @internal */\n  _createClass(AnimatedString, [{\n    key: \"getValue\",\n    value: function getValue() {\n      var value = this._string;\n      return value == null ? this._string = this._toString(this._value) : value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      if (is2.str(value)) {\n        if (value == this._string) {\n          return false;\n        }\n        this._string = value;\n        this._value = 1;\n      } else if (_get(_getPrototypeOf(AnimatedString.prototype), \"setValue\", this).call(this, value)) {\n        this._string = null;\n      } else {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(goal) {\n      if (goal) {\n        this._toString = createInterpolator({\n          output: [this.getValue(), goal]\n        });\n      }\n      this._value = 0;\n      _get(_getPrototypeOf(AnimatedString.prototype), \"reset\", this).call(this);\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      return new AnimatedString(value);\n    }\n  }]);\n  return AnimatedString;\n}(AnimatedValue);\n\n// src/AnimatedArray.ts\nimport { isAnimatedString } from \"@react-spring/shared\";\n\n// src/AnimatedObject.ts\nimport { each, eachProp, getFluidValue, hasFluidValue } from \"@react-spring/shared\";\n\n// src/context.ts\nvar TreeContext = {\n  dependencies: null\n};\n\n// src/AnimatedObject.ts\nvar AnimatedObject = /*#__PURE__*/function (_Animated2) {\n  _inherits(AnimatedObject, _Animated2);\n  var _super3 = _createSuper(AnimatedObject);\n  function AnimatedObject(source) {\n    var _this3;\n    _classCallCheck(this, AnimatedObject);\n    _this3 = _super3.call(this);\n    _this3.source = source;\n    _this3.setValue(source);\n    return _this3;\n  }\n  _createClass(AnimatedObject, [{\n    key: \"getValue\",\n    value: function getValue(animated) {\n      var values = {};\n      eachProp(this.source, function (source, key) {\n        if (isAnimated(source)) {\n          values[key] = source.getValue(animated);\n        } else if (hasFluidValue(source)) {\n          values[key] = getFluidValue(source);\n        } else if (!animated) {\n          values[key] = source;\n        }\n      });\n      return values;\n    }\n    /** Replace the raw object data */\n  }, {\n    key: \"setValue\",\n    value: function setValue(source) {\n      this.source = source;\n      this.payload = this._makePayload(source);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.payload) {\n        each(this.payload, function (node) {\n          return node.reset();\n        });\n      }\n    }\n    /** Create a payload set. */\n  }, {\n    key: \"_makePayload\",\n    value: function _makePayload(source) {\n      if (source) {\n        var payload = /* @__PURE__ */new Set();\n        eachProp(source, this._addToPayload, payload);\n        return Array.from(payload);\n      }\n    }\n    /** Add to a payload set. */\n  }, {\n    key: \"_addToPayload\",\n    value: function _addToPayload(source) {\n      var _this4 = this;\n      if (TreeContext.dependencies && hasFluidValue(source)) {\n        TreeContext.dependencies.add(source);\n      }\n      var payload = getPayload(source);\n      if (payload) {\n        each(payload, function (node) {\n          return _this4.add(node);\n        });\n      }\n    }\n  }]);\n  return AnimatedObject;\n}(Animated);\n\n// src/AnimatedArray.ts\nvar AnimatedArray = /*#__PURE__*/function (_AnimatedObject) {\n  _inherits(AnimatedArray, _AnimatedObject);\n  var _super4 = _createSuper(AnimatedArray);\n  function AnimatedArray(source) {\n    _classCallCheck(this, AnimatedArray);\n    return _super4.call(this, source);\n  }\n  /** @internal */\n  _createClass(AnimatedArray, [{\n    key: \"getValue\",\n    value: function getValue() {\n      return this.source.map(function (node) {\n        return node.getValue();\n      });\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(source) {\n      var payload = this.getPayload();\n      if (source.length == payload.length) {\n        return payload.map(function (node, i) {\n          return node.setValue(source[i]);\n        }).some(Boolean);\n      }\n      _get(_getPrototypeOf(AnimatedArray.prototype), \"setValue\", this).call(this, source.map(makeAnimated));\n      return true;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(source) {\n      return new AnimatedArray(source);\n    }\n  }]);\n  return AnimatedArray;\n}(AnimatedObject);\nfunction makeAnimated(value) {\n  var nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;\n  return nodeType.create(value);\n}\n\n// src/getAnimatedType.ts\nimport { is as is3, isAnimatedString as isAnimatedString2 } from \"@react-spring/shared\";\nfunction getAnimatedType(value) {\n  var parentNode = getAnimated(value);\n  return parentNode ? parentNode.constructor : is3.arr(value) ? AnimatedArray : isAnimatedString2(value) ? AnimatedString : AnimatedValue;\n}\n\n// src/createHost.ts\nimport { is as is5, eachProp as eachProp2 } from \"@react-spring/shared\";\n\n// src/withAnimated.tsx\nimport * as React from \"react\";\nimport { forwardRef, useRef, useCallback, useEffect } from \"react\";\nimport { is as is4, each as each2, raf, useForceUpdate, useOnce, addFluidObserver, removeFluidObserver, useIsomorphicLayoutEffect } from \"@react-spring/shared\";\nvar withAnimated = function withAnimated(Component, host) {\n  var hasInstance =\n  // Function components must use \"forwardRef\" to avoid being\n  // re-rendered on every animation frame.\n  !is4.fun(Component) || Component.prototype && Component.prototype.isReactComponent;\n  return forwardRef(function (givenProps, givenRef) {\n    var instanceRef = useRef(null);\n    var ref = hasInstance &&\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useCallback(function (value) {\n      instanceRef.current = updateRef(givenRef, value);\n    }, [givenRef]);\n    var _getAnimatedState = getAnimatedState(givenProps, host),\n      _getAnimatedState2 = _slicedToArray(_getAnimatedState, 2),\n      props = _getAnimatedState2[0],\n      deps = _getAnimatedState2[1];\n    var forceUpdate = useForceUpdate();\n    var callback = function callback() {\n      var instance = instanceRef.current;\n      if (hasInstance && !instance) {\n        return;\n      }\n      var didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false;\n      if (didUpdate === false) {\n        forceUpdate();\n      }\n    };\n    var observer = new PropsObserver(callback, deps);\n    var observerRef = useRef();\n    useIsomorphicLayoutEffect(function () {\n      observerRef.current = observer;\n      each2(deps, function (dep) {\n        return addFluidObserver(dep, observer);\n      });\n      return function () {\n        if (observerRef.current) {\n          each2(observerRef.current.deps, function (dep) {\n            return removeFluidObserver(dep, observerRef.current);\n          });\n          raf.cancel(observerRef.current.update);\n        }\n      };\n    });\n    useEffect(callback, []);\n    useOnce(function () {\n      return function () {\n        var observer2 = observerRef.current;\n        each2(observer2.deps, function (dep) {\n          return removeFluidObserver(dep, observer2);\n        });\n      };\n    });\n    var usedProps = host.getComponentProps(props.getValue());\n    return /* @__PURE__ */React.createElement(Component, _objectSpread(_objectSpread({}, usedProps), {}, {\n      ref: ref\n    }));\n  });\n};\nvar PropsObserver = /*#__PURE__*/function () {\n  function PropsObserver(update, deps) {\n    _classCallCheck(this, PropsObserver);\n    this.update = update;\n    this.deps = deps;\n  }\n  _createClass(PropsObserver, [{\n    key: \"eventObserved\",\n    value: function eventObserved(event) {\n      if (event.type == \"change\") {\n        raf.write(this.update);\n      }\n    }\n  }]);\n  return PropsObserver;\n}();\nfunction getAnimatedState(props, host) {\n  var dependencies = /* @__PURE__ */new Set();\n  TreeContext.dependencies = dependencies;\n  if (props.style) props = _objectSpread(_objectSpread({}, props), {}, {\n    style: host.createAnimatedStyle(props.style)\n  });\n  props = new AnimatedObject(props);\n  TreeContext.dependencies = null;\n  return [props, dependencies];\n}\nfunction updateRef(ref, value) {\n  if (ref) {\n    if (is4.fun(ref)) ref(value);else ref.current = value;\n  }\n  return value;\n}\n\n// src/createHost.ts\nvar cacheKey = Symbol.for(\"AnimatedComponent\");\nvar createHost = function createHost(components) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$applyAnimatedVal = _ref.applyAnimatedValues,\n    applyAnimatedValues = _ref$applyAnimatedVal === void 0 ? function () {\n      return false;\n    } : _ref$applyAnimatedVal,\n    _ref$createAnimatedSt = _ref.createAnimatedStyle,\n    createAnimatedStyle = _ref$createAnimatedSt === void 0 ? function (style) {\n      return new AnimatedObject(style);\n    } : _ref$createAnimatedSt,\n    _ref$getComponentProp = _ref.getComponentProps,\n    getComponentProps = _ref$getComponentProp === void 0 ? function (props) {\n      return props;\n    } : _ref$getComponentProp;\n  var hostConfig = {\n    applyAnimatedValues: applyAnimatedValues,\n    createAnimatedStyle: createAnimatedStyle,\n    getComponentProps: getComponentProps\n  };\n  var animated = function animated(Component) {\n    var displayName = getDisplayName(Component) || \"Anonymous\";\n    if (is5.str(Component)) {\n      Component = animated[Component] || (animated[Component] = withAnimated(Component, hostConfig));\n    } else {\n      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));\n    }\n    Component.displayName = \"Animated(\".concat(displayName, \")\");\n    return Component;\n  };\n  eachProp2(components, function (Component, key) {\n    if (is5.arr(components)) {\n      key = getDisplayName(Component);\n    }\n    animated[key] = animated(Component);\n  });\n  return {\n    animated: animated\n  };\n};\nvar getDisplayName = function getDisplayName(arg) {\n  return is5.str(arg) ? arg : arg && is5.str(arg.displayName) ? arg.displayName : is5.fun(arg) && arg.name || null;\n};\nexport { Animated, AnimatedArray, AnimatedObject, AnimatedString, AnimatedValue, createHost, getAnimated, getAnimatedType, getPayload, isAnimated, setAnimated };","map":{"version":3,"mappings":"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","names":["defineHidden","$node","Symbol","for","isAnimated","value","getAnimated","owner","setAnimated","node","getPayload","Animated","payload","is","AnimatedValue","_value","num","lastPosition","step","Math","round","done","elapsedTime","durationProgress","lastVelocity","v0","createInterpolator","AnimatedString","_string","_toString","output","str","goal","getValue","isAnimatedString","each","eachProp","getFluidValue","hasFluidValue","TreeContext","dependencies","AnimatedObject","source","setValue","animated","values","key","_makePayload","reset","Set","_addToPayload","Array","from","add","AnimatedArray","map","length","i","some","Boolean","makeAnimated","nodeType","create","getAnimatedType","parentNode","constructor","arr","React","forwardRef","useRef","useCallback","useEffect","raf","useForceUpdate","useOnce","addFluidObserver","removeFluidObserver","useIsomorphicLayoutEffect","withAnimated","Component","host","hasInstance","fun","prototype","isReactComponent","givenProps","givenRef","instanceRef","ref","current","updateRef","getAnimatedState","props","deps","forceUpdate","callback","instance","didUpdate","applyAnimatedValues","observer","PropsObserver","observerRef","dep","cancel","update","usedProps","getComponentProps","event","type","write","style","createAnimatedStyle","cacheKey","createHost","components","hostConfig","displayName","getDisplayName","arg","name"],"sources":["/Users/isha/IdeaProjects/MintedWealth/node_modules/@react-spring/animated/src/Animated.ts","/Users/isha/IdeaProjects/MintedWealth/node_modules/@react-spring/animated/src/AnimatedValue.ts","/Users/isha/IdeaProjects/MintedWealth/node_modules/@react-spring/animated/src/AnimatedString.ts","/Users/isha/IdeaProjects/MintedWealth/node_modules/@react-spring/animated/src/AnimatedArray.ts","/Users/isha/IdeaProjects/MintedWealth/node_modules/@react-spring/animated/src/AnimatedObject.ts","/Users/isha/IdeaProjects/MintedWealth/node_modules/@react-spring/animated/src/context.ts","/Users/isha/IdeaProjects/MintedWealth/node_modules/@react-spring/animated/src/getAnimatedType.ts","/Users/isha/IdeaProjects/MintedWealth/node_modules/@react-spring/animated/src/createHost.ts","/Users/isha/IdeaProjects/MintedWealth/node_modules/@react-spring/animated/src/withAnimated.tsx"],"sourcesContent":["import { defineHidden } from '@react-spring/shared'\nimport { AnimatedValue } from './AnimatedValue'\n\nconst $node: any = Symbol.for('Animated:node')\n\nexport const isAnimated = <T = any>(value: any): value is Animated<T> =>\n  !!value && value[$node] === value\n\n/** Get the owner's `Animated` node. */\nexport const getAnimated = <T = any>(owner: any): Animated<T> | undefined =>\n  owner && owner[$node]\n\n/** Set the owner's `Animated` node. */\nexport const setAnimated = (owner: any, node: Animated) =>\n  defineHidden(owner, $node, node)\n\n/** Get every `AnimatedValue` in the owner's `Animated` node. */\nexport const getPayload = (owner: any): AnimatedValue[] | undefined =>\n  owner && owner[$node] && owner[$node].getPayload()\n\nexport abstract class Animated<T = any> {\n  /** The cache of animated values */\n  protected payload?: Payload\n\n  constructor() {\n    // This makes \"isAnimated\" return true.\n    setAnimated(this, this)\n  }\n\n  /** Get the current value. Pass `true` for only animated values. */\n  abstract getValue(animated?: boolean): T\n\n  /** Set the current value. Returns `true` if the value changed. */\n  abstract setValue(value: T): boolean | void\n\n  /** Reset any animation state. */\n  abstract reset(goal?: T): void\n\n  /** Get every `AnimatedValue` used by this node. */\n  getPayload(): Payload {\n    return this.payload || []\n  }\n}\n\nexport type Payload = readonly AnimatedValue[]\n","import { is } from '@react-spring/shared'\nimport { Animated, Payload } from './Animated'\n\n/** An animated number or a native attribute value */\nexport class AnimatedValue<T = any> extends Animated {\n  done = true\n  elapsedTime!: number\n  lastPosition!: number\n  lastVelocity?: number | null\n  v0?: number | null\n  durationProgress = 0\n\n  constructor(protected _value: T) {\n    super()\n    if (is.num(this._value)) {\n      this.lastPosition = this._value\n    }\n  }\n\n  /** @internal */\n  static create(value: any) {\n    return new AnimatedValue(value)\n  }\n\n  getPayload(): Payload {\n    return [this]\n  }\n\n  getValue() {\n    return this._value\n  }\n\n  setValue(value: T, step?: number) {\n    if (is.num(value)) {\n      this.lastPosition = value\n      if (step) {\n        value = (Math.round(value / step) * step) as any\n        if (this.done) {\n          this.lastPosition = value as any\n        }\n      }\n    }\n    if (this._value === value) {\n      return false\n    }\n    this._value = value\n    return true\n  }\n\n  reset() {\n    const { done } = this\n    this.done = false\n    if (is.num(this._value)) {\n      this.elapsedTime = 0\n      this.durationProgress = 0\n      this.lastPosition = this._value\n      if (done) this.lastVelocity = null\n      this.v0 = null\n    }\n  }\n}\n","import { AnimatedValue } from './AnimatedValue'\nimport { is, createInterpolator } from '@react-spring/shared'\n\ntype Value = string | number\n\nexport class AnimatedString extends AnimatedValue<Value> {\n  protected declare _value: number\n  protected _string: string | null = null\n  protected _toString: (input: number) => string\n\n  constructor(value: string) {\n    super(0)\n    this._toString = createInterpolator({\n      output: [value, value],\n    })\n  }\n\n  /** @internal */\n  static create(value: string) {\n    return new AnimatedString(value)\n  }\n\n  getValue() {\n    const value = this._string\n    return value == null ? (this._string = this._toString(this._value)) : value\n  }\n\n  setValue(value: Value) {\n    if (is.str(value)) {\n      if (value == this._string) {\n        return false\n      }\n      this._string = value\n      this._value = 1\n    } else if (super.setValue(value)) {\n      this._string = null\n    } else {\n      return false\n    }\n    return true\n  }\n\n  reset(goal?: string) {\n    if (goal) {\n      this._toString = createInterpolator({\n        output: [this.getValue(), goal],\n      })\n    }\n    this._value = 0\n    super.reset()\n  }\n}\n","import { isAnimatedString } from '@react-spring/shared'\nimport { AnimatedObject } from './AnimatedObject'\nimport { AnimatedString } from './AnimatedString'\nimport { AnimatedValue } from './AnimatedValue'\n\ntype Value = number | string\ntype Source = AnimatedValue<Value>[]\n\n/** An array of animated nodes */\nexport class AnimatedArray<\n  T extends ReadonlyArray<Value> = Value[]\n> extends AnimatedObject {\n  protected declare source: Source\n  constructor(source: T) {\n    super(source)\n  }\n\n  /** @internal */\n  static create<T extends ReadonlyArray<Value>>(source: T) {\n    return new AnimatedArray(source)\n  }\n\n  getValue(): T {\n    return this.source.map(node => node.getValue()) as any\n  }\n\n  setValue(source: T) {\n    const payload = this.getPayload()\n    // Reuse the payload when lengths are equal.\n    if (source.length == payload.length) {\n      return payload.map((node, i) => node.setValue(source[i])).some(Boolean)\n    }\n    // Remake the payload when length changes.\n    super.setValue(source.map(makeAnimated))\n    return true\n  }\n}\n\nfunction makeAnimated(value: any) {\n  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue\n  return nodeType.create(value)\n}\n","import { Lookup } from '@react-spring/types'\nimport {\n  each,\n  eachProp,\n  getFluidValue,\n  hasFluidValue,\n} from '@react-spring/shared'\nimport { Animated, isAnimated, getPayload } from './Animated'\nimport { AnimatedValue } from './AnimatedValue'\nimport { TreeContext } from './context'\n\n/** An object containing `Animated` nodes */\nexport class AnimatedObject extends Animated {\n  constructor(protected source: Lookup) {\n    super()\n    this.setValue(source)\n  }\n\n  getValue(animated?: boolean) {\n    const values: Lookup = {}\n    eachProp(this.source, (source, key) => {\n      if (isAnimated(source)) {\n        values[key] = source.getValue(animated)\n      } else if (hasFluidValue(source)) {\n        values[key] = getFluidValue(source)\n      } else if (!animated) {\n        values[key] = source\n      }\n    })\n    return values\n  }\n\n  /** Replace the raw object data */\n  setValue(source: Lookup) {\n    this.source = source\n    this.payload = this._makePayload(source)\n  }\n\n  reset() {\n    if (this.payload) {\n      each(this.payload, node => node.reset())\n    }\n  }\n\n  /** Create a payload set. */\n  protected _makePayload(source: Lookup) {\n    if (source) {\n      const payload = new Set<AnimatedValue>()\n      eachProp(source, this._addToPayload, payload)\n      return Array.from(payload)\n    }\n  }\n\n  /** Add to a payload set. */\n  protected _addToPayload(this: Set<AnimatedValue>, source: any) {\n    if (TreeContext.dependencies && hasFluidValue(source)) {\n      TreeContext.dependencies.add(source)\n    }\n    const payload = getPayload(source)\n    if (payload) {\n      each(payload, node => this.add(node))\n    }\n  }\n}\n","import { FluidValue } from '@react-spring/shared'\n\nexport type TreeContext = {\n  /**\n   * Any animated values found when updating the payload of an `AnimatedObject`\n   * are also added to this `Set` to be observed by an animated component.\n   */\n  dependencies: Set<FluidValue> | null\n}\n\nexport const TreeContext: TreeContext = { dependencies: null }\n","import { is, isAnimatedString } from '@react-spring/shared'\nimport { AnimatedType } from './types'\nimport { AnimatedArray } from './AnimatedArray'\nimport { AnimatedString } from './AnimatedString'\nimport { AnimatedValue } from './AnimatedValue'\nimport { getAnimated } from './Animated'\n\n/** Return the `Animated` node constructor for a given value */\nexport function getAnimatedType(value: any): AnimatedType {\n  const parentNode = getAnimated(value)\n  return parentNode\n    ? (parentNode.constructor as any)\n    : is.arr(value)\n    ? AnimatedArray\n    : isAnimatedString(value)\n    ? AnimatedString\n    : AnimatedValue\n}\n","import { Lookup } from '@react-spring/types'\nimport { is, eachProp } from '@react-spring/shared'\nimport { AnimatableComponent, withAnimated } from './withAnimated'\nimport { Animated } from './Animated'\nimport { AnimatedObject } from './AnimatedObject'\n\nexport interface HostConfig {\n  /** Provide custom logic for native updates */\n  applyAnimatedValues: (node: any, props: Lookup) => boolean | void\n  /** Wrap the `style` prop with an animated node */\n  createAnimatedStyle: (style: Lookup) => Animated\n  /** Intercept props before they're passed to an animated component */\n  getComponentProps: (props: Lookup) => typeof props\n}\n\n// A stub type that gets replaced by @react-spring/web and others.\ntype WithAnimated = {\n  (Component: AnimatableComponent): any\n  [key: string]: any\n}\n\n// For storing the animated version on the original component\nconst cacheKey = Symbol.for('AnimatedComponent')\n\nexport const createHost = (\n  components: AnimatableComponent[] | { [key: string]: AnimatableComponent },\n  {\n    applyAnimatedValues = () => false,\n    createAnimatedStyle = style => new AnimatedObject(style),\n    getComponentProps = props => props,\n  }: Partial<HostConfig> = {}\n) => {\n  const hostConfig: HostConfig = {\n    applyAnimatedValues,\n    createAnimatedStyle,\n    getComponentProps,\n  }\n\n  const animated: WithAnimated = (Component: any) => {\n    const displayName = getDisplayName(Component) || 'Anonymous'\n\n    if (is.str(Component)) {\n      Component =\n        animated[Component] ||\n        (animated[Component] = withAnimated(Component, hostConfig))\n    } else {\n      Component =\n        Component[cacheKey] ||\n        (Component[cacheKey] = withAnimated(Component, hostConfig))\n    }\n\n    Component.displayName = `Animated(${displayName})`\n    return Component\n  }\n\n  eachProp(components, (Component, key) => {\n    if (is.arr(components)) {\n      key = getDisplayName(Component)!\n    }\n    animated[key] = animated(Component)\n  })\n\n  return {\n    animated,\n  }\n}\n\nconst getDisplayName = (arg: AnimatableComponent) =>\n  is.str(arg)\n    ? arg\n    : arg && is.str(arg.displayName)\n    ? arg.displayName\n    : (is.fun(arg) && arg.name) || null\n","import * as React from 'react'\nimport { forwardRef, useRef, Ref, useCallback, useEffect } from 'react'\nimport {\n  is,\n  each,\n  raf,\n  useForceUpdate,\n  useOnce,\n  FluidEvent,\n  FluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n  useIsomorphicLayoutEffect,\n} from '@react-spring/shared'\nimport { ElementType } from '@react-spring/types'\n\nimport { AnimatedObject } from './AnimatedObject'\nimport { TreeContext } from './context'\nimport { HostConfig } from './createHost'\n\nexport type AnimatableComponent = string | Exclude<ElementType, string>\n\nexport const withAnimated = (Component: any, host: HostConfig) => {\n  const hasInstance: boolean =\n    // Function components must use \"forwardRef\" to avoid being\n    // re-rendered on every animation frame.\n    !is.fun(Component) ||\n    (Component.prototype && Component.prototype.isReactComponent)\n\n  return forwardRef((givenProps: any, givenRef: Ref<any>) => {\n    const instanceRef = useRef<any>(null)\n\n    // The `hasInstance` value is constant, so we can safely avoid\n    // the `useCallback` invocation when `hasInstance` is false.\n    const ref =\n      hasInstance &&\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCallback(\n        (value: any) => {\n          instanceRef.current = updateRef(givenRef, value)\n        },\n        [givenRef]\n      )\n\n    const [props, deps] = getAnimatedState(givenProps, host)\n\n    const forceUpdate = useForceUpdate()\n\n    const callback = () => {\n      const instance = instanceRef.current\n      if (hasInstance && !instance) {\n        // Either this component was unmounted before changes could be\n        // applied, or the wrapped component forgot to forward its ref.\n        return\n      }\n\n      const didUpdate = instance\n        ? host.applyAnimatedValues(instance, props.getValue(true))\n        : false\n\n      // Re-render the component when native updates fail.\n      if (didUpdate === false) {\n        forceUpdate()\n      }\n    }\n\n    const observer = new PropsObserver(callback, deps)\n\n    const observerRef = useRef<PropsObserver>()\n    useIsomorphicLayoutEffect(() => {\n      observerRef.current = observer\n\n      // Observe the latest dependencies.\n      each(deps, dep => addFluidObserver(dep, observer))\n\n      return () => {\n        // Stop observing previous dependencies.\n        if (observerRef.current) {\n          each(observerRef.current.deps, dep =>\n            removeFluidObserver(dep, observerRef.current!)\n          )\n          raf.cancel(observerRef.current.update)\n        }\n      }\n    })\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(callback, [])\n    // Stop observing on unmount.\n    useOnce(() => () => {\n      const observer = observerRef.current!\n      each(observer.deps, dep => removeFluidObserver(dep, observer))\n    })\n\n    const usedProps = host.getComponentProps(props.getValue())\n    return <Component {...usedProps} ref={ref} />\n  })\n}\n\nclass PropsObserver {\n  constructor(readonly update: () => void, readonly deps: Set<FluidValue>) {}\n  eventObserved(event: FluidEvent) {\n    if (event.type == 'change') {\n      raf.write(this.update)\n    }\n  }\n}\n\ntype AnimatedState = [props: AnimatedObject, dependencies: Set<FluidValue>]\n\nfunction getAnimatedState(props: any, host: HostConfig): AnimatedState {\n  const dependencies = new Set<FluidValue>()\n  TreeContext.dependencies = dependencies\n\n  // Search the style for dependencies.\n  if (props.style)\n    props = {\n      ...props,\n      style: host.createAnimatedStyle(props.style),\n    }\n\n  // Search the props for dependencies.\n  props = new AnimatedObject(props)\n\n  TreeContext.dependencies = null\n  return [props, dependencies]\n}\n\nfunction updateRef<T>(ref: Ref<T>, value: T) {\n  if (ref) {\n    if (is.fun(ref)) ref(value)\n    else (ref as any).current = value\n  }\n  return value\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}